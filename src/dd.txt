
    public elegirAtaque() :Move{
        let incorrecto: boolean = true;
        let movimientoSeleccionado: Move = new Move("", 0); 
    
        while (incorrecto) {
            this.mostrarAtaques();
            
    
            const seleccion = parseInt(readlineSync.question('Elige el numero del ataque: '));
    
            if (seleccion >= 1 && seleccion <= this.lista_movimientos.length) {
                movimientoSeleccionado = this.lista_movimientos[seleccion - 1];
                incorrecto = false;
            } else {
                console.log("Opción inválida, elige un número válido.");
            }
        }
        
        return movimientoSeleccionado; 
    }

    public fallarAtaque(): number {
        const probabilidad_fallo = Math.random() * 100;
    
        return probabilidad_fallo; //Retorna true si el ataque falla
    }
    

    public attack(pokemon:Pokemon):void{
        const posibilidadFallo =this.fallarAtaque(); 
        const movimiento_elegido=this.elegirAtaque();


        if(posibilidadFallo>=20){
            console.log(`${this.nombre} usa ${movimiento_elegido.getNombreMovimiento()} | ${movimiento_elegido.getDamage()}`)
            const randomFactor: number = Math.random() * (1.0 - 0.85) + 0.85;
    
            const damage = (this.ataque/this.defensa)*movimiento_elegido.getDamage()*randomFactor;
            const hp_update=Math.round(pokemon.getHpActual() - damage);
            if (pokemon.getHpActual() <= 0) {
                pokemon.setHpActual(0);
            }
            pokemon.setHpActual(hp_update);

            
        }else{
            console.log("El ataque ha fallado!")
        }

       

    }